export namespace Utils {

   

    const power = (x : nat, y : nat) : nat => {
        let multiply = (acc : nat, elt : nat, last : nat) : nat => { if (last == 0n) { return acc } else { return multiply(acc * elt, elt, abs(last - 1n)) } };
        return multiply(1n, x, y)
    };
        

    const hexa_to_nat = (hexa : bytes) : nat => {
        let _check_size : unit = assert_with_error( (Bytes.length(hexa) == 1n), "Can only convert 1 byte");
        let result : nat = 0n;
        switch (hexa) {
            case 0x00: result = 0n; break;
            case 0x01: result = 1n; break;
            case 0x02: result = 2n; break;
            case 0x03: result = 3n; break;
            case 0x04: result = 4n; break;
            case 0x05: result = 5n; break;
            case 0x06: result = 6n; break;
            case 0x07: result = 7n; break;
            case 0x08: result = 8n; break;
            case 0x09: result = 9n; break;
            case 0x0A: result = 10n; break;
            case 0x0B: result = 11n; break;
            case 0x0C: result = 12n; break;
            case 0x0D: result = 13n; break;
            case 0x0E: result = 14n; break;
            case 0x0F: result = 15n; break;
            case 0x10: result = 16n; break;
            case 0x11: result = 17n; break;
            case 0x12: result = 18n; break;
            case 0x13: result = 19n; break;
            case 0x14: result = 20n; break;
            case 0x15: result = 21n; break;
            case 0x16: result = 22n; break;
            case 0x17: result = 23n; break;
            case 0x18: result = 24n; break;
            case 0x19: result = 25n; break;
            case 0x1A: result = 26n; break;
            case 0x1B: result = 27n; break;
            case 0x1C: result = 28n; break;
            case 0x1D: result = 29n; break;
            case 0x1E: result = 30n; break;
            case 0x1F: result = 31n; break;
            case 0x20: result = 32n; break;
            case 0x21: result = 33n; break;
            case 0x22: result = 34n; break;
            case 0x23: result = 35n; break;
            case 0x24: result = 36n; break;
            case 0x25: result = 37n; break;
            case 0x26: result = 38n; break;
            case 0x27: result = 39n; break;
            case 0x28: result = 40n; break;
            case 0x29: result = 41n; break;
            case 0x2A: result = 42n; break;
            case 0x2B: result = 43n; break;
            case 0x2C: result = 44n; break;
            case 0x2D: result = 45n; break;
            case 0x2E: result = 46n; break;
            case 0x2F: result = 47n; break;
            case 0x30: result = 48n; break;
            case 0x31: result = 49n; break;
            case 0x32: result = 50n; break;
            case 0x33: result = 51n; break;
            case 0x34: result = 52n; break;
            case 0x35: result = 53n; break;
            case 0x36: result = 54n; break;
            case 0x37: result = 55n; break;
            case 0x38: result = 56n; break;
            case 0x39: result = 57n; break;
            case 0x3A: result = 58n; break;
            case 0x3B: result = 59n; break;
            case 0x3C: result = 60n; break;
            case 0x3D: result = 61n; break;
            case 0x3E: result = 62n; break;
            case 0x3F: result = 63n; break;
            case 0x40: result = 64n; break;
            case 0x41: result = 65n; break;
            case 0x42: result = 66n; break;
            case 0x43: result = 67n; break;
            case 0x44: result = 68n; break;
            case 0x45: result = 69n; break;
            case 0x46: result = 70n; break;
            case 0x47: result = 71n; break;
            case 0x48: result = 72n; break;
            case 0x49: result = 73n; break;
            case 0x4A: result = 74n; break;
            case 0x4B: result = 75n; break;
            case 0x4C: result = 76n; break;
            case 0x4D: result = 77n; break;
            case 0x4E: result = 78n; break;
            case 0x4F: result = 79n; break;
            case 0x50: result = 80n; break;
            case 0x51: result = 81n; break;
            case 0x52: result = 82n; break;
            case 0x53: result = 83n; break;
            case 0x54: result = 84n; break;
            case 0x55: result = 85n; break;
            case 0x56: result = 86n; break;
            case 0x57: result = 87n; break;
            case 0x58: result = 88n; break;
            case 0x59: result = 89n; break;
            case 0x5A: result = 90n; break;
            case 0x5B: result = 91n; break;
            case 0x5C: result = 92n; break;
            case 0x5D: result = 93n; break;
            case 0x5E: result = 94n; break;
            case 0x5F: result = 95n; break;
            case 0x60: result = 96n; break;
            case 0x61: result = 97n; break;
            case 0x62: result = 98n; break;
            case 0x63: result = 99n; break;
            case 0x64: result = 100n; break;
            case 0x65: result = 101n; break;
            case 0x66: result = 102n; break;
            case 0x67: result = 103n; break;
            case 0x68: result = 104n; break;
            case 0x69: result = 105n; break;
            case 0x6A: result = 106n; break;
            case 0x6B: result = 107n; break;
            case 0x6C: result = 108n; break;
            case 0x6D: result = 109n; break;
            case 0x6E: result = 110n; break;
            case 0x6F: result = 111n; break;
            case 0x70: result = 112n; break;
            case 0x71: result = 113n; break;
            case 0x72: result = 114n; break;
            case 0x73: result = 115n; break;
            case 0x74: result = 116n; break;
            case 0x75: result = 117n; break;
            case 0x76: result = 118n; break;
            case 0x77: result = 119n; break;
            case 0x78: result = 120n; break;
            case 0x79: result = 121n; break;
            case 0x7A: result = 122n; break;
            case 0x7B: result = 123n; break;
            case 0x7C: result = 124n; break;
            case 0x7D: result = 125n; break;
            case 0x7E: result = 126n; break;
            case 0x7F: result = 127n; break;
            case 0x80: result = 128n; break;
            case 0x81: result = 129n; break;
            case 0x82: result = 130n; break;
            case 0x83: result = 131n; break;
            case 0x84: result = 132n; break;
            case 0x85: result = 133n; break;
            case 0x86: result = 134n; break;
            case 0x87: result = 135n; break;
            case 0x88: result = 136n; break;
            case 0x89: result = 137n; break;
            case 0x8A: result = 138n; break;
            case 0x8B: result = 139n; break;
            case 0x8C: result = 140n; break;
            case 0x8D: result = 141n; break;
            case 0x8E: result = 142n; break;
            case 0x8F: result = 143n; break;
            case 0x90: result = 144n; break;
            case 0x91: result = 145n; break;
            case 0x92: result = 146n; break;
            case 0x93: result = 147n; break;
            case 0x94: result = 148n; break;
            case 0x95: result = 149n; break;
            case 0x96: result = 150n; break;
            case 0x97: result = 151n; break;
            case 0x98: result = 152n; break;
            case 0x99: result = 153n; break;
            case 0x9A: result = 154n; break;
            case 0x9B: result = 155n; break;
            case 0x9C: result = 156n; break;
            case 0x9D: result = 157n; break;
            case 0x9E: result = 158n; break;
            case 0x9F: result = 159n; break;
            case 0xA0: result = 160n; break;
            case 0xA1: result = 161n; break;
            case 0xA2: result = 162n; break;
            case 0xA3: result = 163n; break;
            case 0xA4: result = 164n; break;
            case 0xA5: result = 165n; break;
            case 0xA6: result = 166n; break;
            case 0xA7: result = 167n; break;
            case 0xA8: result = 168n; break;
            case 0xA9: result = 169n; break;
            case 0xAA: result = 170n; break;
            case 0xAB: result = 171n; break;
            case 0xAC: result = 172n; break;
            case 0xAD: result = 173n; break;
            case 0xAE: result = 174n; break;
            case 0xAF: result = 175n; break;
            case 0xB0: result = 176n; break;
            case 0xB1: result = 177n; break;
            case 0xB2: result = 178n; break;
            case 0xB3: result = 179n; break;
            case 0xB4: result = 180n; break;
            case 0xB5: result = 181n; break;
            case 0xB6: result = 182n; break;
            case 0xB7: result = 183n; break;
            case 0xB8: result = 184n; break;
            case 0xB9: result = 185n; break;
            case 0xBA: result = 186n; break;
            case 0xBB: result = 187n; break;
            case 0xBC: result = 188n; break;
            case 0xBD: result = 189n; break;
            case 0xBE: result = 190n; break;
            case 0xBF: result = 191n; break;
            case 0xC0: result = 192n; break;
            case 0xC1: result = 193n; break;
            case 0xC2: result = 194n; break;
            case 0xC3: result = 195n; break;
            case 0xC4: result = 196n; break;
            case 0xC5: result = 197n; break;
            case 0xC6: result = 198n; break;
            case 0xC7: result = 199n; break;
            case 0xC8: result = 200n; break;
            case 0xC9: result = 201n; break;
            case 0xCA: result = 202n; break;
            case 0xCB: result = 203n; break;
            case 0xCC: result = 204n; break;
            case 0xCD: result = 205n; break;
            case 0xCE: result = 206n; break;
            case 0xCF: result = 207n; break;
            case 0xD0: result = 208n; break;
            case 0xD1: result = 209n; break;
            case 0xD2: result = 210n; break;
            case 0xD3: result = 211n; break;
            case 0xD4: result = 212n; break;
            case 0xD5: result = 213n; break;
            case 0xD6: result = 214n; break;
            case 0xD7: result = 215n; break;
            case 0xD8: result = 216n; break;
            case 0xD9: result = 217n; break;
            case 0xDA: result = 218n; break;
            case 0xDB: result = 219n; break;
            case 0xDC: result = 220n; break;
            case 0xDD: result = 221n; break;
            case 0xDE: result = 222n; break;
            case 0xDF: result = 223n; break;
            case 0xE0: result = 224n; break;
            case 0xE1: result = 225n; break;
            case 0xE2: result = 226n; break;
            case 0xE3: result = 227n; break;
            case 0xE4: result = 228n; break;
            case 0xE5: result = 229n; break;
            case 0xE6: result = 230n; break;
            case 0xE7: result = 231n; break;
            case 0xE8: result = 232n; break;
            case 0xE9: result = 233n; break;
            case 0xEA: result = 234n; break;
            case 0xEB: result = 235n; break;
            case 0xEC: result = 236n; break;
            case 0xED: result = 237n; break;
            case 0xEE: result = 238n; break;
            case 0xEF: result = 239n; break;
            case 0xF0: result = 240n; break;
            case 0xF1: result = 241n; break;
            case 0xF2: result = 242n; break;
            case 0xF3: result = 243n; break;
            case 0xF4: result = 244n; break;
            case 0xF5: result = 245n; break;
            case 0xF6: result = 246n; break;
            case 0xF7: result = 247n; break;
            case 0xF8: result = 248n; break;
            case 0xF9: result = 249n; break;
            case 0xFA: result = 250n; break;
            case 0xFB: result = 251n; break;
            case 0xFC: result = 252n; break;
            case 0xFD: result = 253n; break;
            case 0xFE: result = 254n; break;
            case 0xFF: result = 255n; break;

            default: result = (failwith("Wrong hexa") as nat);
        };
        return result;
    };

    export const bytes_to_nat = (payload : bytes) : nat => {
        let convert_to_nat = (acc : nat, indice : nat, payload : bytes) : nat => {
            if (indice == 1n) {
                return acc + hexa_to_nat(payload)
            } 
            else {
                let size : nat = Bytes.length(payload);
                let one_left_bytes = Bytes.sub(0 as nat, 1 as nat, payload);
                let right_bytes = Bytes.sub(1 as nat, abs(size - 1n), payload);
                let one_left_nat = hexa_to_nat(one_left_bytes) * power(256n, abs(indice - 1n));
                return convert_to_nat(acc + one_left_nat, abs(indice - 1n), right_bytes)
            }
        };
        return convert_to_nat(0 as nat, Bytes.length(payload), payload)
    };

}